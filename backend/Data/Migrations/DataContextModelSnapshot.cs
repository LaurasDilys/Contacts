// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.Models.Contact", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AlternativeEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AlternativePhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DateOfBirth")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Me")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            Id = "261396d6-5733-432e-b939-74746e964548",
                            CreatorId = "1c7a718b-642b-457f-8f8f-6490a6db4663",
                            FirstName = "Banginis",
                            LastName = "Delfinauskas",
                            Me = false,
                            Notes = "My best friend :)"
                        },
                        new
                        {
                            Id = "6717ac51-f9f2-48a9-93ca-5c66a6364cef",
                            CreatorId = "1c7a718b-642b-457f-8f8f-6490a6db4663",
                            FirstName = "Žuvis",
                            LastName = "Paukštė",
                            Me = true,
                            PhoneNumber = "37065432100"
                        },
                        new
                        {
                            Id = "45c44e7c-e65d-4144-ba76-ae3d2f5e6adc",
                            CreatorId = "fe4d4664-ce1c-407f-85e3-3815555bb146",
                            FirstName = "John",
                            LastName = "Bassham",
                            Me = true,
                            PhoneNumber = "37068334501"
                        },
                        new
                        {
                            Id = "9be23521-04fc-4ec7-85a4-b246d68e58e4",
                            CreatorId = "7b371581-fb18-4eca-b58a-9b2fd5d2f3b8",
                            FirstName = "Jill",
                            LastName = "Sousa",
                            Me = true,
                            PhoneNumber = "37065034702"
                        },
                        new
                        {
                            Id = "9a128e08-fc6b-4abc-bc93-a101d434e5df",
                            CreatorId = "b961ed5a-10d7-437c-ae2f-ec8a42e0b942",
                            FirstName = "Nolan",
                            LastName = "Irving",
                            Me = true,
                            PhoneNumber = "37069034503"
                        },
                        new
                        {
                            Id = "3d0b85b1-8e0a-418b-add4-62cf87476a65",
                            CreatorId = "45592ea4-e1b1-471c-8563-26f3b8e58989",
                            FirstName = "Colman",
                            LastName = "Odhams",
                            Me = true,
                            PhoneNumber = "37068034504"
                        },
                        new
                        {
                            Id = "a585db2e-f1e5-48ac-a62f-13461e00d8cd",
                            CreatorId = "e2c4da34-02ca-4ab5-a6da-78561d5a687b",
                            FirstName = "Corinne",
                            LastName = "Farrell",
                            Me = true,
                            PhoneNumber = "37063034705"
                        },
                        new
                        {
                            Id = "cf120bf8-8fae-40c2-9202-7fe8df8afdbc",
                            CreatorId = "d75ef10e-b29f-4264-bae7-3dd329d61bc4",
                            FirstName = "Kalila",
                            LastName = "Gemlbett",
                            Me = true,
                            PhoneNumber = "37064654506"
                        },
                        new
                        {
                            Id = "ea83de52-24f7-4e7d-9101-0fe6a5be77eb",
                            CreatorId = "09c3b944-c30e-42ad-93ed-33c3a4eb7130",
                            FirstName = "Frank",
                            LastName = "Treves",
                            Me = true,
                            PhoneNumber = "37067233507"
                        },
                        new
                        {
                            Id = "fd2c2c55-f898-496b-ad4f-8ddc7ee69412",
                            CreatorId = "6cf22040-790b-4996-bf28-281ce4a6c613",
                            FirstName = "Tamiko",
                            LastName = "McCreery",
                            Me = true,
                            PhoneNumber = "37064545408"
                        },
                        new
                        {
                            Id = "a819f246-101d-4975-b20b-f038fc0b3f31",
                            CreatorId = "3878c586-0249-487e-8621-3e5bcbd38cde",
                            FirstName = "Rebbecca",
                            LastName = "Cahen",
                            Me = true,
                            PhoneNumber = "37063394509"
                        },
                        new
                        {
                            Id = "22f3c470-8bad-480f-a232-80b88928464c",
                            CreatorId = "b063338e-8b7b-4135-aa84-07f48cddca06",
                            FirstName = "Aggy",
                            LastName = "Sterley",
                            Me = true,
                            PhoneNumber = "37068734510"
                        },
                        new
                        {
                            Id = "e3fb3bc7-d0db-41b2-a3d6-9438914102e6",
                            CreatorId = "7124516a-9d7b-4a92-93c1-8529113a1e0b",
                            FirstName = "Camila",
                            LastName = "Rathborne",
                            Me = true,
                            PhoneNumber = "37061533511"
                        },
                        new
                        {
                            Id = "1085fa01-7321-4b15-87d4-01d0b61cbd4d",
                            CreatorId = "21cd7a65-4b90-4fd0-99ee-e0317e216f0d",
                            FirstName = "Tom",
                            LastName = "Durkin",
                            Me = true,
                            PhoneNumber = "37063534512"
                        },
                        new
                        {
                            Id = "b972126a-8c31-4f33-b3a7-2af8dc18852f",
                            CreatorId = "545d5fd3-f04e-4a3c-85e0-17d3afff29d4",
                            FirstName = "Quill",
                            LastName = "Camelin",
                            Me = true,
                            PhoneNumber = "37061734513"
                        },
                        new
                        {
                            Id = "cea8e77c-e33d-40f2-a883-d5bb2defe941",
                            CreatorId = "20380a83-579a-4336-83c1-2e89d4f39f83",
                            FirstName = "Stephen",
                            LastName = "Ellingsworth",
                            Me = true,
                            PhoneNumber = "37063733514"
                        },
                        new
                        {
                            Id = "79165502-ce2e-401a-8688-3dfb2ebaa1bd",
                            CreatorId = "8a037a6f-0c0b-4803-aa23-f5b08b1b9f16",
                            FirstName = "Gordon",
                            LastName = "Santhouse",
                            Me = true,
                            PhoneNumber = "37068737515"
                        },
                        new
                        {
                            Id = "a32d3490-d465-4f20-8e12-e14e85ebff58",
                            CreatorId = "0376277c-aa98-4fbb-9779-114fb75a4f06",
                            FirstName = "Louis",
                            LastName = "Gianni",
                            Me = true,
                            PhoneNumber = "37063734516"
                        },
                        new
                        {
                            Id = "d4aa4070-0b74-4225-9771-6f9460e4e25f",
                            CreatorId = "12c742ca-ec6f-4563-8a08-0e7ba0a449c8",
                            FirstName = "Tim",
                            LastName = "Castiblanco",
                            Me = true,
                            PhoneNumber = "37067271517"
                        },
                        new
                        {
                            Id = "ab6c6904-0ada-408d-bccd-ba8b880fb433",
                            CreatorId = "1c0cde1d-4ea6-4474-8b87-c28f75fd1fb0",
                            FirstName = "Steve",
                            LastName = "Kebbell",
                            Me = true,
                            PhoneNumber = "37065231518"
                        },
                        new
                        {
                            Id = "76532d83-c880-4af0-b35b-bdf69144288f",
                            CreatorId = "6bf67d2d-15ab-465c-89c4-2d199289b8db",
                            FirstName = "Tessa",
                            LastName = "Picker",
                            Me = true,
                            PhoneNumber = "37062271519"
                        },
                        new
                        {
                            Id = "e35b0737-4c62-4891-9b52-6d3c14234b00",
                            CreatorId = "2de2bf7e-0aae-4e8a-b0ca-b94fc9ae4916",
                            FirstName = "Lorrin",
                            LastName = "Dore",
                            Me = true,
                            PhoneNumber = "37061274520"
                        });
                });

            modelBuilder.Entity("Data.Models.ContactUser", b =>
                {
                    b.Property<string>("ContactId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ContactId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ContactUsers");

                    b.HasData(
                        new
                        {
                            ContactId = "6717ac51-f9f2-48a9-93ca-5c66a6364cef",
                            UserId = "2de2bf7e-0aae-4e8a-b0ca-b94fc9ae4916"
                        },
                        new
                        {
                            ContactId = "45c44e7c-e65d-4144-ba76-ae3d2f5e6adc",
                            UserId = "1c7a718b-642b-457f-8f8f-6490a6db4663"
                        },
                        new
                        {
                            ContactId = "9be23521-04fc-4ec7-85a4-b246d68e58e4",
                            UserId = "1c7a718b-642b-457f-8f8f-6490a6db4663"
                        },
                        new
                        {
                            ContactId = "9a128e08-fc6b-4abc-bc93-a101d434e5df",
                            UserId = "1c7a718b-642b-457f-8f8f-6490a6db4663"
                        });
                });

            modelBuilder.Entity("Data.Models.UnacceptedShare", b =>
                {
                    b.Property<string>("ContactId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ContactId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UnacceptedShares");

                    b.HasData(
                        new
                        {
                            ContactId = "3d0b85b1-8e0a-418b-add4-62cf87476a65",
                            UserId = "1c7a718b-642b-457f-8f8f-6490a6db4663"
                        },
                        new
                        {
                            ContactId = "a585db2e-f1e5-48ac-a62f-13461e00d8cd",
                            UserId = "1c7a718b-642b-457f-8f8f-6490a6db4663"
                        },
                        new
                        {
                            ContactId = "cf120bf8-8fae-40c2-9202-7fe8df8afdbc",
                            UserId = "1c7a718b-642b-457f-8f8f-6490a6db4663"
                        });
                });

            modelBuilder.Entity("Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AlternativeEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AlternativePhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateOfBirth")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowMyContact")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1c7a718b-642b-457f-8f8f-6490a6db4663",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd654cc0-ead4-4299-850a-4dd8dbcd45ba",
                            EmailConfirmed = false,
                            FirstName = "Žuvis",
                            LastName = "Paukštė",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAEAACcQAAAAEDxPhq2ComglJ40apP5mfdHGYQFOuV+rM+E5hmDwth1sADQvXfzGrmvSQ894Jg2fPA==",
                            PhoneNumber = "37065432100",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f8f1374d-da28-4006-b5cf-f0466782a8a5",
                            ShowMyContact = true,
                            TwoFactorEnabled = false,
                            UserName = "user"
                        },
                        new
                        {
                            Id = "fe4d4664-ce1c-407f-85e3-3815555bb146",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "34993b57-95f8-4992-9b4f-198f9b5205ae",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Bassham",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER01",
                            PasswordHash = "AQAAAAEAACcQAAAAEDdaPBiAUdKiIekNCnkxk1I7kRlJCo8ZFJkSD5Q5hAcN06ywaiNcXps2SoQIg6S9Gw==",
                            PhoneNumber = "37068334501",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "44105175-06c0-469b-93de-4afc236cd0b0",
                            ShowMyContact = true,
                            TwoFactorEnabled = false,
                            UserName = "user01"
                        },
                        new
                        {
                            Id = "7b371581-fb18-4eca-b58a-9b2fd5d2f3b8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bde3c71b-3036-41a7-9fdb-3b6db0e55e03",
                            EmailConfirmed = false,
                            FirstName = "Jill",
                            LastName = "Sousa",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER02",
                            PasswordHash = "AQAAAAEAACcQAAAAEODyRMV1hQo/7xIS8XmhLcCMCsMCpztRSVAmG5iL/swzVLW2km2xHEA09+uUZGkxtw==",
                            PhoneNumber = "37065034702",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0238242b-1ed7-4a05-b3f8-472200c720f5",
                            ShowMyContact = true,
                            TwoFactorEnabled = false,
                            UserName = "user02"
                        },
                        new
                        {
                            Id = "b961ed5a-10d7-437c-ae2f-ec8a42e0b942",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "334ac604-dfde-4d9e-ba70-9ba2597b249f",
                            EmailConfirmed = false,
                            FirstName = "Nolan",
                            LastName = "Irving",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER03",
                            PasswordHash = "AQAAAAEAACcQAAAAEIKfN7vG4GIc7tGyR6b5kDxJj/jDbvnGjSWlEY7bi+UvhLC8922hnXK6DKLu+dGivw==",
                            PhoneNumber = "37069034503",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8a2594ac-0e20-4667-8dc0-f5e891c450b2",
                            ShowMyContact = true,
                            TwoFactorEnabled = false,
                            UserName = "user03"
                        },
                        new
                        {
                            Id = "45592ea4-e1b1-471c-8563-26f3b8e58989",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "89244028-e76f-4143-a315-20946d99e279",
                            EmailConfirmed = false,
                            FirstName = "Colman",
                            LastName = "Odhams",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER04",
                            PasswordHash = "AQAAAAEAACcQAAAAEOS352Wyb8nVTWesT16Juxt61fJbJ0ooCaXixiZwKryLM3W+X9dIiPu1wdWFae1zqA==",
                            PhoneNumber = "37068034504",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bc3bc9a5-5188-43cc-82e1-1194235c499b",
                            ShowMyContact = true,
                            TwoFactorEnabled = false,
                            UserName = "user04"
                        },
                        new
                        {
                            Id = "e2c4da34-02ca-4ab5-a6da-78561d5a687b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "64d00cfb-362a-48d5-8aeb-8e50e3cc41e1",
                            EmailConfirmed = false,
                            FirstName = "Corinne",
                            LastName = "Farrell",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER05",
                            PasswordHash = "AQAAAAEAACcQAAAAEIeamzxYD2zRJPUZoMOMGhvLeLWTrXQXF9LzVIot8r7OCNpqPD6l6JE/Ba3I/9tt5g==",
                            PhoneNumber = "37063034705",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eb8791dc-6196-4819-8684-1c262187b964",
                            ShowMyContact = true,
                            TwoFactorEnabled = false,
                            UserName = "user05"
                        },
                        new
                        {
                            Id = "d75ef10e-b29f-4264-bae7-3dd329d61bc4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ac8c97ae-cf03-4fcd-9e26-49022058550c",
                            EmailConfirmed = false,
                            FirstName = "Kalila",
                            LastName = "Gemlbett",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER06",
                            PasswordHash = "AQAAAAEAACcQAAAAEGnZpQL8AK7p2DDS3zWMBfsq1BHOijHw3/+c51FGcpKe2q15VTuV0lIBIWuUwJEbFg==",
                            PhoneNumber = "37064654506",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f685ba25-89d7-4925-912a-e17eb7dfc524",
                            ShowMyContact = true,
                            TwoFactorEnabled = false,
                            UserName = "user06"
                        },
                        new
                        {
                            Id = "09c3b944-c30e-42ad-93ed-33c3a4eb7130",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c9cc9d1f-cd7a-4e9b-9bda-6f56ef4b1f65",
                            EmailConfirmed = false,
                            FirstName = "Frank",
                            LastName = "Treves",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER07",
                            PasswordHash = "AQAAAAEAACcQAAAAEMMWExJY6hupoJpGFfcVFBPhYBt27FvcImzuDKswB1wyMVKpdfbWcjS/CkUigd76pA==",
                            PhoneNumber = "37067233507",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f716ead1-c220-4aa7-af8f-621c79b34d1b",
                            ShowMyContact = true,
                            TwoFactorEnabled = false,
                            UserName = "user07"
                        },
                        new
                        {
                            Id = "6cf22040-790b-4996-bf28-281ce4a6c613",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "41786b16-d33b-4845-b3f3-238cf3161e10",
                            EmailConfirmed = false,
                            FirstName = "Tamiko",
                            LastName = "McCreery",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER08",
                            PasswordHash = "AQAAAAEAACcQAAAAEPVyKuOM0FpiXc0MZtcQqABT2+P3p0spVUL89PP9WbRjQbYGB4w07F01oL4UR6+nlA==",
                            PhoneNumber = "37064545408",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "30d037c5-3ebd-4c55-a559-b4cbca787615",
                            ShowMyContact = true,
                            TwoFactorEnabled = false,
                            UserName = "user08"
                        },
                        new
                        {
                            Id = "3878c586-0249-487e-8621-3e5bcbd38cde",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f42eb921-b885-47c7-a16d-d01730e09d98",
                            EmailConfirmed = false,
                            FirstName = "Rebbecca",
                            LastName = "Cahen",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER09",
                            PasswordHash = "AQAAAAEAACcQAAAAEJdf3dX1ixxGEUX6j04zW/D9t0pZfCSLxPFktUc02E6XacLxlG872GH/uSWw074tGw==",
                            PhoneNumber = "37063394509",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8c75bbda-6c24-4bda-9dd5-5e539beff945",
                            ShowMyContact = true,
                            TwoFactorEnabled = false,
                            UserName = "user09"
                        },
                        new
                        {
                            Id = "b063338e-8b7b-4135-aa84-07f48cddca06",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "147b7fd4-895b-41fe-9cf9-2bb92f9a34e4",
                            EmailConfirmed = false,
                            FirstName = "Aggy",
                            LastName = "Sterley",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER10",
                            PasswordHash = "AQAAAAEAACcQAAAAEPAJf4+yCYCNwXyr1gJjCwUk3YgwXDIWI8yROlbGOCslzlecY2wX5AkywFAZPV7xtA==",
                            PhoneNumber = "37068734510",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8fd5f620-35f2-47be-b12b-58a4e4d3d423",
                            ShowMyContact = true,
                            TwoFactorEnabled = false,
                            UserName = "user10"
                        },
                        new
                        {
                            Id = "7124516a-9d7b-4a92-93c1-8529113a1e0b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c51c1314-da5b-4865-8898-19571c95e1c4",
                            EmailConfirmed = false,
                            FirstName = "Camila",
                            LastName = "Rathborne",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER11",
                            PasswordHash = "AQAAAAEAACcQAAAAEGU/pqhcqi2CEnhski4uZv30SI+gptkCYxCHm2MmtMkyoAmxB50BwXBZYJiIdXPauQ==",
                            PhoneNumber = "37061533511",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9a84cad4-ad25-44a3-8dbd-2f387aa7eb35",
                            ShowMyContact = true,
                            TwoFactorEnabled = false,
                            UserName = "user11"
                        },
                        new
                        {
                            Id = "21cd7a65-4b90-4fd0-99ee-e0317e216f0d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5ed14431-ddac-40a1-b072-d1a09f9250ad",
                            EmailConfirmed = false,
                            FirstName = "Tom",
                            LastName = "Durkin",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER12",
                            PasswordHash = "AQAAAAEAACcQAAAAEFoFu3q62jqBdBq8kxJY7vmQ7If1TnVqeJtIJwuNqCYRQH9MlUWypZiS5QrMyduqAA==",
                            PhoneNumber = "37063534512",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6edcb045-e008-48fe-bed9-3c77443e85a2",
                            ShowMyContact = true,
                            TwoFactorEnabled = false,
                            UserName = "user12"
                        },
                        new
                        {
                            Id = "545d5fd3-f04e-4a3c-85e0-17d3afff29d4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4599d67a-2d87-4358-a5ce-263037c2be00",
                            EmailConfirmed = false,
                            FirstName = "Quill",
                            LastName = "Camelin",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER13",
                            PasswordHash = "AQAAAAEAACcQAAAAELfsxg5z1NNe8I6UB1uweKuaBDu7URVPl2AxnkkDrhMq2i5tUgTKH9aWpWvet/kuFA==",
                            PhoneNumber = "37061734513",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "37a3b033-b77a-40de-8931-fc4236432333",
                            ShowMyContact = true,
                            TwoFactorEnabled = false,
                            UserName = "user13"
                        },
                        new
                        {
                            Id = "20380a83-579a-4336-83c1-2e89d4f39f83",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e343e687-1c43-4c58-86e6-8920ffd2213d",
                            EmailConfirmed = false,
                            FirstName = "Stephen",
                            LastName = "Ellingsworth",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER14",
                            PasswordHash = "AQAAAAEAACcQAAAAEKxty9Ch+GhlH7Ff035LIHoRn+kPVzE+Y13VoQyMG8PMA8Sjeq4FenMRL5TeqDSKTA==",
                            PhoneNumber = "37063733514",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "26753e0e-f81a-40b2-84fc-6f690ff1e6b8",
                            ShowMyContact = true,
                            TwoFactorEnabled = false,
                            UserName = "user14"
                        },
                        new
                        {
                            Id = "8a037a6f-0c0b-4803-aa23-f5b08b1b9f16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4785afaa-b809-4062-bb83-f1caa23af49c",
                            EmailConfirmed = false,
                            FirstName = "Gordon",
                            LastName = "Santhouse",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER15",
                            PasswordHash = "AQAAAAEAACcQAAAAEB/5JfSLV2hMwui9VffqVT1uLJKYkX6QIPjVG27WfsbZb56lx9aWponAYLf/8Y4+zQ==",
                            PhoneNumber = "37068737515",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6e296db6-6ff9-4225-9476-52c9a871591a",
                            ShowMyContact = true,
                            TwoFactorEnabled = false,
                            UserName = "user15"
                        },
                        new
                        {
                            Id = "0376277c-aa98-4fbb-9779-114fb75a4f06",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "990cfccc-9f42-49a4-802b-bdf1e3f9e7ea",
                            EmailConfirmed = false,
                            FirstName = "Louis",
                            LastName = "Gianni",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER16",
                            PasswordHash = "AQAAAAEAACcQAAAAEH0362Vfp7UDTjWBOoG6gMyuR3fzy0rTIA+QguEPLXfXoyRTlAoLBYFdx1O032ZrXw==",
                            PhoneNumber = "37063734516",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "df5d77f0-4aa6-4a4f-9aad-af738929c2b8",
                            ShowMyContact = true,
                            TwoFactorEnabled = false,
                            UserName = "user16"
                        },
                        new
                        {
                            Id = "12c742ca-ec6f-4563-8a08-0e7ba0a449c8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ccdad726-7333-495a-8e48-d1567a3ab49a",
                            EmailConfirmed = false,
                            FirstName = "Tim",
                            LastName = "Castiblanco",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER17",
                            PasswordHash = "AQAAAAEAACcQAAAAELRB4Nv/EBh9kVgngUy/s8MMMsHNLw8n4SoQQgKfSIQ1ZRDJ+2zN3l0SVZBG3AzNRA==",
                            PhoneNumber = "37067271517",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4ed9188f-7674-47d6-9cef-9dcb31948021",
                            ShowMyContact = true,
                            TwoFactorEnabled = false,
                            UserName = "user17"
                        },
                        new
                        {
                            Id = "1c0cde1d-4ea6-4474-8b87-c28f75fd1fb0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fb53f0de-6265-4a37-ba08-3dc13b62d9d8",
                            EmailConfirmed = false,
                            FirstName = "Steve",
                            LastName = "Kebbell",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER18",
                            PasswordHash = "AQAAAAEAACcQAAAAEBVYSmDjSAtn/hzM6t17UlZa/LbebUHsOWm/OBj9W9NuSdwJkyv0t/eZJXltefty0g==",
                            PhoneNumber = "37065231518",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "22fbab60-1cb8-4d0e-8b64-74cb929cee5b",
                            ShowMyContact = true,
                            TwoFactorEnabled = false,
                            UserName = "user18"
                        },
                        new
                        {
                            Id = "6bf67d2d-15ab-465c-89c4-2d199289b8db",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a26adae-646c-4969-a85a-c0bb01aca7a4",
                            EmailConfirmed = false,
                            FirstName = "Tessa",
                            LastName = "Picker",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER19",
                            PasswordHash = "AQAAAAEAACcQAAAAEAqvKkqqeYoet0cV/+FcH3IPMe6zy/I/g/Pn5k7B73q0L/g2qAlfhS59T0aL64mSyQ==",
                            PhoneNumber = "37062271519",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "929c28d7-8b89-43d4-a816-30e63526f148",
                            ShowMyContact = true,
                            TwoFactorEnabled = false,
                            UserName = "user19"
                        },
                        new
                        {
                            Id = "2de2bf7e-0aae-4e8a-b0ca-b94fc9ae4916",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3d4d101b-c0f2-4d32-8511-ebd8ff2782ac",
                            EmailConfirmed = false,
                            FirstName = "Lorrin",
                            LastName = "Dore",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER20",
                            PasswordHash = "AQAAAAEAACcQAAAAEO9SFwATGfoebjFaJ2jiACuYePKAg0bJxUwOsRYamiCn2E0kQNT2N/9K1WUl27vBlg==",
                            PhoneNumber = "37061274520",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ea67f968-6363-410b-8dd6-fdeff042a0d2",
                            ShowMyContact = true,
                            TwoFactorEnabled = false,
                            UserName = "user20"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Data.Models.Contact", b =>
                {
                    b.HasOne("Data.Models.User", "Creator")
                        .WithMany("Contacts")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Data.Models.ContactUser", b =>
                {
                    b.HasOne("Data.Models.Contact", "Contact")
                        .WithMany("ContactUsers")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.User", "User")
                        .WithMany("ContactUsers")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Models.UnacceptedShare", b =>
                {
                    b.HasOne("Data.Models.Contact", "Contact")
                        .WithMany("UnacceptedShares")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.User", "User")
                        .WithMany("UnacceptedShares")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.Contact", b =>
                {
                    b.Navigation("ContactUsers");

                    b.Navigation("UnacceptedShares");
                });

            modelBuilder.Entity("Data.Models.User", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("ContactUsers");

                    b.Navigation("UnacceptedShares");
                });
#pragma warning restore 612, 618
        }
    }
}
