// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20211102052517_AddMockUsers")]
    partial class AddMockUsers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.Models.Contact", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AlternativeEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AlternativePhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DateOfBirth")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Me")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Data.Models.ContactUser", b =>
                {
                    b.Property<string>("ContactId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ContactId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ContactUsers");
                });

            modelBuilder.Entity("Data.Models.UnacceptedShare", b =>
                {
                    b.Property<string>("ContactId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ContactId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UnacceptedShares");
                });

            modelBuilder.Entity("Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AlternativeEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AlternativePhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateOfBirth")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowMyContact")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "fe4d4664-ce1c-407f-85e3-3815555bb146",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af743441-f0b1-411b-9c1d-4ccbc9ff89af",
                            EmailConfirmed = false,
                            FirstName = "Atalanta",
                            LastName = "Bassham",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER01",
                            PasswordHash = "AQAAAAEAACcQAAAAEBXP+vMUbNXQciL6xluY8n39xKhHTJJTQEHeH1Fu5ekSxyL3zAd4fjhEpDR3+CwtVA==",
                            PhoneNumber = "37068334501",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "86a92a5f-79c8-4c0a-9d9e-93c0a2af7885",
                            ShowMyContact = false,
                            TwoFactorEnabled = false,
                            UserName = "user01"
                        },
                        new
                        {
                            Id = "1c0cde1d-4ea6-4474-8b87-c28f75fd1fb0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "41a3d9a1-138d-4818-a75c-99d3662e89cb",
                            EmailConfirmed = false,
                            FirstName = "Rusty",
                            LastName = "Sousa",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER02",
                            PasswordHash = "AQAAAAEAACcQAAAAEHs8y0/9G41DXfGkOFJtkMhL63WSrZxTB/2gj04/PoteMqp9O3I1bVoeAA1SQteOyA==",
                            PhoneNumber = "37061034702",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "42c52fcd-fee1-4e96-8cb1-6636f2fb5987",
                            ShowMyContact = false,
                            TwoFactorEnabled = false,
                            UserName = "user02"
                        },
                        new
                        {
                            Id = "12c742ca-ec6f-4563-8a08-0e7ba0a449c8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d5c5275c-54d4-4262-b55d-2cfc4281d7bb",
                            EmailConfirmed = false,
                            FirstName = "Niall",
                            LastName = "Irving",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER03",
                            PasswordHash = "AQAAAAEAACcQAAAAEHqmxpeBOckpvHjo5qV4EJeHcV6aDdb8BVwTz/340q/mW0V/QXdXgZHBRjf/mDRfLw==",
                            PhoneNumber = "37061034503",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c412c432-4f98-4f91-a548-c9a9a6111e51",
                            ShowMyContact = false,
                            TwoFactorEnabled = false,
                            UserName = "user03"
                        },
                        new
                        {
                            Id = "0376277c-aa98-4fbb-9779-114fb75a4f06",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "63086d41-15b8-48d9-8af1-e4143710a916",
                            EmailConfirmed = false,
                            FirstName = "Colman",
                            LastName = "Odhams",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER04",
                            PasswordHash = "AQAAAAEAACcQAAAAELOsrNw56JlsVfLqhXos6lY9eGvygYqE/uenQttN+KgFU1yOQ4Xita0SBGYNsjoR4g==",
                            PhoneNumber = "37068034504",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4fa160ab-4115-4e7f-a1e2-d2a96a2d8387",
                            ShowMyContact = false,
                            TwoFactorEnabled = false,
                            UserName = "user04"
                        },
                        new
                        {
                            Id = "8a037a6f-0c0b-4803-aa23-f5b08b1b9f16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd1c0ad9-d749-4e9a-b11b-60cf1fcb8321",
                            EmailConfirmed = false,
                            FirstName = "Corinne",
                            LastName = "Farrell",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER05",
                            PasswordHash = "AQAAAAEAACcQAAAAEOQiWC8sodUBNV+NtkhcDut6C0dn0MmYxQQUWypA0nakx4GWbSlhMR2OJl9GGlSsBA==",
                            PhoneNumber = "37063034705",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8c90accb-194d-4953-9f3b-169986d4083c",
                            ShowMyContact = false,
                            TwoFactorEnabled = false,
                            UserName = "user05"
                        },
                        new
                        {
                            Id = "20380a83-579a-4336-83c1-2e89d4f39f83",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5aa88091-2515-496b-a441-8e827d32d1b9",
                            EmailConfirmed = false,
                            FirstName = "Kalila",
                            LastName = "Gemlbett",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER06",
                            PasswordHash = "AQAAAAEAACcQAAAAEEjj7PV9Vo/dZyBfwisxVe6DjcoY6tCn2lLiMoxy7ZbHAElLm40NHxeTVnn3A0TgZQ==",
                            PhoneNumber = "37061654506",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "71380fb3-e484-4088-9f92-4c3e1101e656",
                            ShowMyContact = false,
                            TwoFactorEnabled = false,
                            UserName = "user06"
                        },
                        new
                        {
                            Id = "545d5fd3-f04e-4a3c-85e0-17d3afff29d4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cd24d7c5-e3df-4281-bac1-df4a91b6ac3a",
                            EmailConfirmed = false,
                            FirstName = "Francisca",
                            LastName = "Treves",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER07",
                            PasswordHash = "AQAAAAEAACcQAAAAEFGis2HsW5EfQF+7x66WJYAfXLl9m0rGnWXOwA0Z9c6OmPEClAOPcHCkRGIXnWhghg==",
                            PhoneNumber = "37061233507",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e6472d0b-cbf3-493e-b12f-a9ea2b875530",
                            ShowMyContact = false,
                            TwoFactorEnabled = false,
                            UserName = "user07"
                        },
                        new
                        {
                            Id = "21cd7a65-4b90-4fd0-99ee-e0317e216f0d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4e7f50a0-fa63-414e-a75e-956079a1f0ac",
                            EmailConfirmed = false,
                            FirstName = "Tamiko",
                            LastName = "McCreery",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER08",
                            PasswordHash = "AQAAAAEAACcQAAAAEEH56ZUg4qIoEWovXsbZZAKbjo+Skzh0XIFApfHU8+TK/u0zg4xSmIZqg1edNsYLLw==",
                            PhoneNumber = "37064545408",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d09b2e99-98ae-4f0c-ac16-47582013b313",
                            ShowMyContact = false,
                            TwoFactorEnabled = false,
                            UserName = "user08"
                        },
                        new
                        {
                            Id = "7124516a-9d7b-4a92-93c1-8529113a1e0b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5e2001ba-de22-4f47-9ac0-f034bd2136a5",
                            EmailConfirmed = false,
                            FirstName = "Vaughan",
                            LastName = "Cahen",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER09",
                            PasswordHash = "AQAAAAEAACcQAAAAEIu9v0u6e8WVgVxK7vr1UYgRdUhlnIh7UGMMRBwE/0Ea5OHq0LwaNTjqDs0wOUiDHQ==",
                            PhoneNumber = "37061394509",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c080342f-db39-47e3-a842-a3d54999239d",
                            ShowMyContact = false,
                            TwoFactorEnabled = false,
                            UserName = "user09"
                        },
                        new
                        {
                            Id = "b063338e-8b7b-4135-aa84-07f48cddca06",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f91e272c-62e7-4bbf-a294-49aa1f4682e1",
                            EmailConfirmed = false,
                            FirstName = "Aggy",
                            LastName = "Sterley",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER10",
                            PasswordHash = "AQAAAAEAACcQAAAAEIeDXngSzxe+DkfBpatH5Ve0m/Qoe/tOLl1WqG5K3ReHit/Hyipuk/mz4+63NCNZzg==",
                            PhoneNumber = "37061734510",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d2de88e6-0524-4dd3-8e8a-af61370d1694",
                            ShowMyContact = false,
                            TwoFactorEnabled = false,
                            UserName = "user10"
                        },
                        new
                        {
                            Id = "3878c586-0249-487e-8621-3e5bcbd38cde",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "31db655a-65ba-4568-bcfa-48da24e091ac",
                            EmailConfirmed = false,
                            FirstName = "Camila",
                            LastName = "Rathborne",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER11",
                            PasswordHash = "AQAAAAEAACcQAAAAECk/F4pkUZ7sLIpL1df8uYpsTO16s667TLOol/kjZfqqyzScURoPbkqV9+34u+P3IA==",
                            PhoneNumber = "37061533511",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "94af76f9-dfff-49ff-a4c2-7289c989d44b",
                            ShowMyContact = false,
                            TwoFactorEnabled = false,
                            UserName = "user11"
                        },
                        new
                        {
                            Id = "6cf22040-790b-4996-bf28-281ce4a6c613",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7bbe4198-b81b-4152-a5f3-ea0e61217f8a",
                            EmailConfirmed = false,
                            FirstName = "Hadria",
                            LastName = "Durkin",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER12",
                            PasswordHash = "AQAAAAEAACcQAAAAEDLn3Wuf+J5DXHN4hqswiTLvPiOcsnn7m3Dn0eBjTSnpOoC3wQn0na7lhhrovSzJ0Q==",
                            PhoneNumber = "37061534512",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ce8dee5-579e-4a3d-bc24-f62bd4924b98",
                            ShowMyContact = false,
                            TwoFactorEnabled = false,
                            UserName = "user12"
                        },
                        new
                        {
                            Id = "09c3b944-c30e-42ad-93ed-33c3a4eb7130",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bfc85e29-7c1d-41d9-b93e-f70988fcc1e4",
                            EmailConfirmed = false,
                            FirstName = "Quill",
                            LastName = "Camelin",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER13",
                            PasswordHash = "AQAAAAEAACcQAAAAEFuQQbyg8VMGJNv47akwtkJUvLfLONUxap70mb3AHdjKQRZLEg++h9asSKWXvpiHTg==",
                            PhoneNumber = "37061734513",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9181ba8f-8bad-43ff-8a53-13a22f222bac",
                            ShowMyContact = false,
                            TwoFactorEnabled = false,
                            UserName = "user13"
                        },
                        new
                        {
                            Id = "d75ef10e-b29f-4264-bae7-3dd329d61bc4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8906f210-57b2-489f-a877-f69f62b7d2b9",
                            EmailConfirmed = false,
                            FirstName = "Rebbecca",
                            LastName = "Ellingsworth",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER14",
                            PasswordHash = "AQAAAAEAACcQAAAAEO9vNi8QlNEbvOw7ZMRC/euDJbLUq2U7cJdsgABe4zgcFf/clCd551UNpS2TpAvhHQ==",
                            PhoneNumber = "37063733514",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "80667c14-1402-4fee-aadd-89af2cf55936",
                            ShowMyContact = false,
                            TwoFactorEnabled = false,
                            UserName = "user14"
                        },
                        new
                        {
                            Id = "e2c4da34-02ca-4ab5-a6da-78561d5a687b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b8dcf28-38e8-4fe6-8370-74009c77cb07",
                            EmailConfirmed = false,
                            FirstName = "Gard",
                            LastName = "Santhouse",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER15",
                            PasswordHash = "AQAAAAEAACcQAAAAELZFCuiEcOL1O22yrVhiEih6uMZ86gJnO+enMWeOtZA12uy51BQ34RvAJAIVa3+AhQ==",
                            PhoneNumber = "37061737515",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "77e2f1e8-1358-48c3-862a-7b2c1ca5bea7",
                            ShowMyContact = false,
                            TwoFactorEnabled = false,
                            UserName = "user15"
                        },
                        new
                        {
                            Id = "45592ea4-e1b1-471c-8563-26f3b8e58989",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26136236-e7fe-4078-a436-119f58396f4f",
                            EmailConfirmed = false,
                            FirstName = "Loydie",
                            LastName = "Gianni",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER16",
                            PasswordHash = "AQAAAAEAACcQAAAAEE9TI8qNphYmditjQuClZ363wfe2hoQ8Lv29csV+YIumKiUjRthEW/kPL7sclgyrgQ==",
                            PhoneNumber = "37063734516",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4b3a03cb-e2f9-4fc0-a24b-adc8cc34572d",
                            ShowMyContact = false,
                            TwoFactorEnabled = false,
                            UserName = "user16"
                        },
                        new
                        {
                            Id = "b961ed5a-10d7-437c-ae2f-ec8a42e0b942",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bf80575b-f7e7-41f6-b2f3-6443701738ac",
                            EmailConfirmed = false,
                            FirstName = "Granny",
                            LastName = "Castiblanco",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER17",
                            PasswordHash = "AQAAAAEAACcQAAAAEIbb5CC0RpF7MnnGXSYO9ZA9RBHFPXkTGS5MISt0vxV418mVFxctqZ66Q4F7/L3Ejg==",
                            PhoneNumber = "37061271517",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d5792a8b-1949-47a1-bd63-5819186a3ced",
                            ShowMyContact = false,
                            TwoFactorEnabled = false,
                            UserName = "user17"
                        },
                        new
                        {
                            Id = "7b371581-fb18-4eca-b58a-9b2fd5d2f3b8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fad1f96e-a96b-4ab6-9d02-1b7dc523894d",
                            EmailConfirmed = false,
                            FirstName = "Kingsly",
                            LastName = "Kebbell",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER18",
                            PasswordHash = "AQAAAAEAACcQAAAAEFma5MAUmIZebuW/YQvQRfM9A5gf7kgFGLb70LfJVPFSsPAmpEV3uJR8/83+JSShFg==",
                            PhoneNumber = "37067231518",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0f3077c7-5caa-4449-a0d0-f99e9bcef25c",
                            ShowMyContact = false,
                            TwoFactorEnabled = false,
                            UserName = "user18"
                        },
                        new
                        {
                            Id = "6bf67d2d-15ab-465c-89c4-2d199289b8db",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ab10e129-0884-49a0-94eb-f14855cc425e",
                            EmailConfirmed = false,
                            FirstName = "Tessa",
                            LastName = "Picker",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER19",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLANqHhShdxRQt+S4TUwUPU32qb18A3dFnSeKqIlN/rmRcI+qzmKLfzbcI77lIl5A==",
                            PhoneNumber = "37061271519",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "40946359-aa46-4c83-be6b-93ae3885f726",
                            ShowMyContact = false,
                            TwoFactorEnabled = false,
                            UserName = "user19"
                        },
                        new
                        {
                            Id = "2de2bf7e-0aae-4e8a-b0ca-b94fc9ae4916",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7628f777-0b8c-4a95-ad7d-6e812f4beecd",
                            EmailConfirmed = false,
                            FirstName = "Lorrin",
                            LastName = "Dore",
                            LockoutEnabled = false,
                            NormalizedUserName = "USER20",
                            PasswordHash = "AQAAAAEAACcQAAAAEOfHlmqvLsCrm7fDy+tqqRiDhqeuCt0rL0eGZRuz50rJy5SpS5Hrm2v42juqY9+/wA==",
                            PhoneNumber = "37061274520",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7cdc9701-619f-4de8-b4f7-b08b35daa7d1",
                            ShowMyContact = false,
                            TwoFactorEnabled = false,
                            UserName = "user20"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Data.Models.Contact", b =>
                {
                    b.HasOne("Data.Models.User", "Creator")
                        .WithMany("Contacts")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Data.Models.ContactUser", b =>
                {
                    b.HasOne("Data.Models.Contact", "Contact")
                        .WithMany("ContactUsers")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.User", "User")
                        .WithMany("ContactUsers")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Models.UnacceptedShare", b =>
                {
                    b.HasOne("Data.Models.Contact", "Contact")
                        .WithMany("UnacceptedShares")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.User", "User")
                        .WithMany("UnacceptedShares")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.Contact", b =>
                {
                    b.Navigation("ContactUsers");

                    b.Navigation("UnacceptedShares");
                });

            modelBuilder.Entity("Data.Models.User", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("ContactUsers");

                    b.Navigation("UnacceptedShares");
                });
#pragma warning restore 612, 618
        }
    }
}
